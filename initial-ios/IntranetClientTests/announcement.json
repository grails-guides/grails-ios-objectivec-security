{"id":2,"body":"<p>Grails co-founder Jeff Scott Brown continues his deep dives into Grails with another awesome&nbsp;<strong>Grails&nbsp;Quickcast</strong>, brought to you in collaboration with&nbsp;<a href=\"https://dzone.com/articles/oci-and-dzone-present-a-grails-quickcast-2\" target=\"_blank\">DZone</a>. In case you missed part 1, here's&nbsp;<a href=\"https://dzone.com/articles/oci-and-dzone-present-a-grails-quickcast-1\" rel=\"nofollow\" target=\"_blank\">a dive into interceptors</a>.</p>\n<p>In a delightful and informative 15 minutes, Brown probes&nbsp;<a href=\"http://grails.github.io/grails-views/latest/#_json_views\" rel=\"nofollow\" target=\"_blank\">JSON views.</a>&nbsp;Beginning with a Grails 3.1.1 application, created with a standard web profile, Brown added a few custom domain classes. The artist class has albums associated with it, and is annotated with grails.rest.Resource.</p>\n<p>The ultimate goal is publishing a REST API under&nbsp;<code>/artists</code>&nbsp;for managing instances of the&nbsp;<code>artist</code>&nbsp;class, and to support the JSON and XML formats.</p>\n<p>Brown uses music examples, including&nbsp;<em>Space Oddity</em>&nbsp;by David Bowie (RIP), and&nbsp;<em>Close to the Edge</em>&nbsp;by Yes. Sending a request to&nbsp;<code>/artists</code>&nbsp;gives a list of artists all of whom have albums associated with them. While the app is running in development mode, the JSON files can be altered and the effects of those changes can be seen real-time in the application. For example, switching&nbsp;<code>\"ArtistName\": \"Riverside\"</code>&nbsp;to <code>\"theArtistName\": \"Riverside\"</code>.</p>\n<p>This Quickcast assumes basic knowledge of Grails, JSON, and REST APIs. Check out Brown\u2019s neat intro to JSON views!</p>","title":"Grails Quickcast #2: JSON Views"}
